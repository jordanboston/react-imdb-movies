{"version":3,"sources":["utils/HttpClient.js","movies/movies.tsx","search/search.tsx","App.tsx","config.tsx","serviceWorker.ts","index.tsx"],"names":["baseURL","url","a","params","method","config","redirect","headers","JSON","stringify","fetch","then","response","json","get","path","sendRequest","useStyles","makeStyles","theme","createStyles","root","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","width","height","gridTile","icon","color","Movies","props","classes","className","GridList","cellHeight","GridListTile","key","cols","style","ListSubheader","component","movies","map","id","title","image","description","src","alt","GridListTileBar","subtitle","actionIcon","IconButton","aria-label","Search","handleSubmit","expression","state","handleSendRequest","setState","handleInputExpression","event","preventDefault","target","value","this","TextField","label","onChange","Button","size","variant","onClick","React","Component","App","getMovie","request","HttpClient","results","catch","error","console","log","Container","maxWidth","margin","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"gUACMA,G,MAAO,UADQ,sCACR,0B,4CAOb,WAA2BC,GAA3B,+BAAAC,EAAA,6DAAgCC,EAAhC,+BAAyC,KAAMC,EAA/C,+BAAwD,MAChDC,EAAS,CACbD,OAAQA,EACRE,SAAU,SACVC,QAAS,CACP,OAAU,mBACV,eAAgB,mBAChB,8BAA+B,MAIpB,QAAXH,IACFC,EAAM,KAAWG,KAAKC,UAAUN,IAZpC,kBAcSO,MAAMT,EAAKI,GAAQM,MAAK,SAACC,GAAD,OAAcA,EAASC,WAdxD,4C,sBAiBe,OACbC,IAvBF,SAAaC,EAAMZ,GAEjB,O,2CAAOa,CADKhB,EAAUe,EACEZ,K,wFCWpBc,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJC,QAAS,OACTC,SAAU,OACVC,eAAgB,eAChBC,SAAU,SACVC,gBAAiBP,EAAMQ,QAAQC,WAAWC,OAE5CC,SAAU,CACRC,MAAO,IACPC,OAAQ,KAEVC,SAAU,GAGVC,KAAM,CACJC,MAAO,kCAiCEC,EA5BA,SAACC,GACd,IAAMC,EAAUrB,IAEhB,OACE,yBAAKsB,UAAWD,EAAQjB,MACtB,kBAACmB,EAAA,EAAD,CAAUC,WAAY,IAAKF,UAAWD,EAAQR,UAC5C,kBAACY,EAAA,EAAD,CAAcC,IAAI,YAAYC,KAAM,EAAGC,MAAO,CAAEb,OAAQ,SACtD,kBAACc,EAAA,EAAD,CAAeC,UAAU,SAE1BV,EAAMW,OAAOC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,MAAOC,EAArB,EAAqBA,YAArB,OAChB,kBAACX,EAAA,EAAD,CAAcC,IAAKO,EAAIX,UAAWD,EAAQL,UACxC,yBAAKqB,IAAKF,EAAOG,IAAI,2BACrB,kBAACC,EAAA,EAAD,CACEL,MAAOA,EACPM,SAAU,8BAAOJ,GACjBK,WACE,kBAACC,EAAA,EAAD,CAAYC,aAAA,qBAA0BT,GAASZ,UAAWD,EAAQJ,MAChE,kBAAC,IAAD,gB,0BCPH2B,E,kDA1Cb,WAAYxB,GAAa,IAAD,8BACtB,cAAMA,IAMRyB,aAAe,WAAO,IACZC,EAAoB,EAAKC,MAAzBD,WACJA,IACF,EAAK1B,MAAM4B,kBAAkBF,GAC7B,EAAKG,SAAS,CAAEH,WAAY,OAXR,EAgBxBI,sBAAwB,SAACC,GACvBA,EAAMC,iBACN,IAAMN,EAAaK,EAAME,OAAOC,MAChC,EAAKL,SAAS,CAAEH,gBAjBhB,EAAKC,MAAQ,CACXb,MAAO,IAHa,E,qDAsBd,IACAY,EAAoBS,KAAKR,MAAzBD,WACR,OACE,yBAAKxB,UAAU,UACb,kBAACkC,EAAA,EAAD,CACEvB,GAAG,qBACHX,UAAU,aACVJ,MAAM,YACNuC,MAAM,qBACNC,SAAUH,KAAKL,sBACfI,MAAOR,IAET,kBAACa,EAAA,EAAD,CAAQC,KAAK,QAAQC,QAAQ,YAAY3C,MAAM,YAAY4C,QAASP,KAAKV,cAAzE,e,GAnCakB,IAAMC,WC4CZC,E,kDApCb,WAAY7C,GAAe,IAAD,8BACxB,cAAMA,IAOR8C,SAR0B,uCAQf,WAAOpB,GAAP,eAAA7D,EAAA,6DACHkF,EAAUC,EAAWvE,IAAX,yBCtBW,aDsBX,YAA4CiD,IACzDpD,MAAK,SAACC,GACL,GAAIA,EAAU,CACZ,IAAMoC,EAAcpC,EAAS0E,QAC7B,EAAKpB,SAAS,CAAElB,WAElB,OAAOpC,KAER2E,OAAM,SAACC,GACNC,QAAQC,IAAI,QAASF,MAVhB,kBAYFJ,GAZE,2CARe,sDAGxB,EAAKpB,MAAQ,CACXhB,OAAQ,IAJc,E,qDAwBxB,OACE,yBAAKT,UAAU,OACb,kBAACoD,EAAA,EAAD,CAAWC,SAAS,KAAK/C,MAAO,CAAEgD,OAAQ,WACxC,kBAAC,EAAD,CAAQ5B,kBAAmBO,KAAKW,WAEhC,kBAAC,EAAD,CAAQnC,OAAQwB,KAAKR,MAAMhB,e,GA9BnBgC,IAAMC,WEAJa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/F,MAAK,SAAAgG,GACJA,EAAaC,gBAEdrB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMqB,c","file":"static/js/main.33cb5866.chunk.js","sourcesContent":["const corsAnywhere = 'https://cors-anywhere.herokuapp.com'\nconst baseURL = `${corsAnywhere}/https://imdb-api.com`\n\nfunction get(path, params) {\n  const url = baseURL + path\n  return sendRequest(url, params);\n}\n\nasync function sendRequest(url, params = null, method = 'GET') {\n  const config = {\n    method: method,\n    redirect: 'follow',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n    }\n  };\n\n  if (method !== 'GET') {\n    config['body'] = JSON.stringify(params)\n  }\n  return fetch(url, config).then((response) => response.json());\n}\n\nexport default {\n  get\n}","import React from 'react';\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport IconButton from '@material-ui/core/IconButton';\nimport InfoIcon from '@material-ui/icons/Info';\n\ninterface Movie {\n  id: number;\n  title: string;\n  image: string;\n  description: string;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      justifyContent: 'space-around',\n      overflow: 'hidden',\n      backgroundColor: theme.palette.background.paper,\n    },\n    gridList: {\n      width: 500,\n      height: 650,\n    },\n    gridTile: {\n\n    },\n    icon: {\n      color: 'rgba(255, 255, 255, 0.54)',\n    },\n  })\n);\n\nconst Movies = (props: any) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <GridList cellHeight={200} className={classes.gridList}>\n        <GridListTile key=\"Subheader\" cols={2} style={{ height: 'auto' }}>\n          <ListSubheader component=\"div\"></ListSubheader>\n        </GridListTile>\n        {props.movies.map(({ id, title, image, description }: Movie) => (\n          <GridListTile key={id} className={classes.gridTile}>\n            <img src={image} alt=\"`{Title} movie poster`\" />\n            <GridListTileBar\n              title={title}\n              subtitle={<span>{description}</span>}\n              actionIcon={\n                <IconButton aria-label={`info about ${title}`} className={classes.icon}>\n                  <InfoIcon />\n                </IconButton>\n              }\n            />\n          </GridListTile>\n        ))}\n      </GridList>\n    </div>\n  );\n};\n\nexport default Movies;\n","import React from 'react';\nimport './search.css';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\nclass Search extends React.Component<any> {\n  constructor(props: any) {\n    super(props as any);\n    this.state = {\n      title: '',\n    };\n  }\n\n  handleSubmit = () => {\n    const { expression }: any = this.state;\n    if (expression) {\n      this.props.handleSendRequest(expression);\n      this.setState({ expression: '' });\n    }\n    return;\n  };\n\n  handleInputExpression = (event: any) => {\n    event.preventDefault();\n    const expression = event.target.value;\n    this.setState({ expression });\n  };\n\n  render() {\n    const { expression }: any = this.state;\n    return (\n      <div className=\"search\">\n        <TextField\n          id=\"standard-secondary\"\n          className=\"search-box\"\n          color=\"secondary\"\n          label=\"Search for a movie\"\n          onChange={this.handleInputExpression}\n          value={expression}\n        />\n        <Button size=\"large\" variant=\"contained\" color=\"secondary\" onClick={this.handleSubmit}>\n          Search\n        </Button>\n      </div>\n    );\n  }\n}\n\nexport default Search;\n","import React from 'react';\nimport './App.css';\nimport HttpClient from './utils/HttpClient';\nimport { API_KEY } from './config';\nimport Container from '@material-ui/core/Container';\nimport Movies from './movies/movies';\nimport Search from './search/search';\n\ninterface Props { }\ninterface State {\n  movies: [];\n}\nclass App extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props as any);\n\n    this.state = {\n      movies: [],\n    };\n  }\n\n  getMovie = async (expression: string) => {\n    const request = HttpClient.get(`/en/API/Search/${API_KEY}/${expression}`)\n      .then((response) => {\n        if (response) {\n          const movies: any = response.results;\n          this.setState({ movies });\n        }\n        return response;\n      })\n      .catch((error) => {\n        console.log('error', error);\n      });\n    return request;\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Container maxWidth=\"lg\" style={{ margin: '0 auto' }}>\n          <Search handleSendRequest={this.getMovie} />\n\n          <Movies movies={this.state.movies} />\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n// export default withStyles(useStyles,  { withTheme: true })(App);\n","export const API_KEY: string = 'k_08gybO97';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}