{"version":3,"sources":["utils/HttpClient.js","movie/movie.tsx","search/search.tsx","App.tsx","config.tsx","serviceWorker.ts","index.tsx"],"names":["baseURL","url","a","params","method","config","redirect","headers","JSON","stringify","fetch","then","response","json","get","path","sendRequest","useStyles","makeStyles","theme","createStyles","root","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","width","height","icon","color","Movie","title","image","description","classes","GridList","cellHeight","className","GridListTile","src","alt","GridListTileBar","subtitle","actionIcon","IconButton","aria-label","Search","props","handleSubmit","state","handleSendRequest","setState","handleInputTitle","event","preventDefault","target","value","this","TextField","id","label","onChange","Button","variant","onClick","React","Component","App","getMovie","request","HttpClient","console","log","movies","results","catch","error","Container","maxWidth","style","margin","map","movie","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"6VACMA,G,MAAO,UADQ,sCACR,0B,4CAOb,WAA2BC,GAA3B,+BAAAC,EAAA,6DAAgCC,EAAhC,+BAAyC,KAAMC,EAA/C,+BAAwD,MAChDC,EAAS,CACbD,OAAQA,EACRE,SAAU,SACVC,QAAS,CACP,OAAU,mBACV,eAAgB,mBAChB,8BAA+B,MAIpB,QAAXH,IACFC,EAAM,KAAWG,KAAKC,UAAUN,IAZpC,kBAcSO,MAAMT,EAAKI,GAAQM,MAAK,SAACC,GAAD,OAAcA,EAASC,WAdxD,4C,sBAiBe,OACbC,IAvBF,SAAaC,EAAMZ,GAEjB,O,2CAAOa,CADKhB,EAAUe,EACEZ,K,wFCSpBc,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJC,QAAS,OACTC,SAAU,OACVC,eAAgB,eAChBC,SAAU,SACVC,gBAAiBP,EAAMQ,QAAQC,WAAWC,OAE5CC,SAAU,CACRC,MAAO,IACPC,OAAQ,KAEVC,KAAM,CACJC,MAAO,kCA+BEC,EA1BD,SAAC,GAA6C,IAA5CC,EAA2C,EAA3CA,MAAOC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,YACtBC,EAAetB,IAErB,OACE,kBAACuB,EAAA,EAAD,CAAUC,WAAY,IAAKC,UAAWH,EAAQT,UAC5C,kBAACa,EAAA,EAAD,KACE,yBAAKC,IAAKP,EAAOQ,IAAI,2BACrB,kBAACC,EAAA,EAAD,CACEV,MAAOA,EACPW,SACE,8BACGT,GAGLU,WACE,kBAACC,EAAA,EAAD,CAAYC,aAAA,qBAA0Bd,GAASM,UAAWH,EAAQN,MAChE,kBAAC,IAAD,UAZV,O,0BCOWkB,E,kDAtCb,WAAYC,GAAa,IAAD,8BACtB,cAAMA,IAMRC,aAAe,WAAO,IACZjB,EAAe,EAAKkB,MAApBlB,MACR,EAAKgB,MAAMG,kBAAkBnB,GAC7B,EAAKoB,SAAS,CAAEpB,MAAO,MAVD,EAaxBqB,iBAAmB,SAACC,GAClBA,EAAMC,iBACN,IAAMvB,EAAQsB,EAAME,OAAOC,MAC3B,EAAKL,SAAS,CAAEpB,WAdhB,EAAKkB,MAAQ,CACXlB,MAAO,IAHa,E,qDAmBd,IACAA,EAAe0B,KAAKR,MAApBlB,MACR,OACE,yBAAKM,UAAU,UACb,kBAACqB,EAAA,EAAD,CACEC,GAAG,iBACHtB,UAAU,aACVuB,MAAM,qBACNC,SAAUJ,KAAKL,iBACfI,MAAOzB,IAET,kBAAC+B,EAAA,EAAD,CAAQC,QAAQ,YAAYlC,MAAM,UAAUmC,QAASP,KAAKT,cAA1D,e,GA/BaiB,IAAMC,WCgDZC,E,kDAvCb,WAAYpB,GAAe,IAAD,8BACxB,cAAMA,IAORqB,SAR0B,uCAQf,WAAOrC,GAAP,eAAAlC,EAAA,6DACHwE,EAAUC,EAAW7D,IAAX,yBCvBW,aDuBX,YAA4CsB,IACzDzB,MAAK,SAACC,GACL,GAAIA,EAAU,CACZgE,QAAQC,IAAI,WAAYjE,GACxB,IAAMkE,EAAclE,EAASmE,QAC7B,EAAKvB,SAAS,CAAEsB,WAElB,OAAOlE,KAERoE,OAAM,SAACC,GACNL,QAAQC,IAAI,QAASI,MAXhB,kBAaFP,GAbE,2CARe,sDAGxB,EAAKpB,MAAQ,CACXwB,OAAQ,IAJc,E,qDAyBxB,OACE,yBAAKpC,UAAU,OACb,kBAACwC,EAAA,EAAD,CAAWC,SAAS,KAAKC,MAAO,CAAEC,OAAQ,WACxC,kBAAC,EAAD,CAAQ9B,kBAAmBO,KAAKW,WAE/BX,KAAKR,MAAMwB,OAAOQ,KAAI,YAA4B,IAAzBtB,EAAwB,EAAxBA,GAAOuB,EAAiB,sBAChD,OAAO,kBAAC,EAAD,eAAOC,IAAKxB,GAAQuB,a,GAhCrBjB,IAAMC,WEDJkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1F,MAAK,SAAA2F,GACJA,EAAaC,gBAEdvB,OAAM,SAAAC,GACLL,QAAQK,MAAMA,EAAMuB,c","file":"static/js/main.a33c7f62.chunk.js","sourcesContent":["const corsAnywhere = 'https://cors-anywhere.herokuapp.com'\nconst baseURL = `${corsAnywhere}/https://imdb-api.com`\n\nfunction get(path, params) {\n  const url = baseURL + path\n  return sendRequest(url, params);\n}\n\nasync function sendRequest(url, params = null, method = 'GET') {\n  const config = {\n    method: method,\n    redirect: 'follow',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n    }\n  };\n\n  if (method !== 'GET') {\n    config['body'] = JSON.stringify(params)\n  }\n  return fetch(url, config).then((response) => response.json());\n}\n\nexport default {\n  get\n}","import React from 'react';\nimport './movie.css';\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport IconButton from '@material-ui/core/IconButton';\nimport InfoIcon from '@material-ui/icons/Info';\ninterface MovieProps {\n  title: string;\n  image: string;\n  description: string;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      justifyContent: 'space-around',\n      overflow: 'hidden',\n      backgroundColor: theme.palette.background.paper,\n    },\n    gridList: {\n      width: 500,\n      height: 450,\n    },\n    icon: {\n      color: 'rgba(255, 255, 255, 0.54)',\n    },\n  })\n);\n\nconst Movie = ({title, image, description}: MovieProps) => {\n  const classes: any = useStyles();\n\n  return (\n    <GridList cellHeight={180} className={classes.gridList}>\n      <GridListTile>\n        <img src={image} alt=\"`{Title} movie poster`\" />\n        <GridListTileBar\n          title={title}\n          subtitle={\n            <span>\n              {description}\n            </span>\n          }\n          actionIcon={\n            <IconButton aria-label={`info about ${title}`} className={classes.icon}>\n              <InfoIcon />\n            </IconButton>\n          }\n        />\n      </GridListTile>\n      )}\n    </GridList>\n  );\n}\n\nexport default Movie;\n","import React from 'react';\nimport './search.css';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\nclass Search extends React.Component<any> {\n  constructor(props: any) {\n    super(props as any);\n    this.state = {\n      title: '',\n    };\n  }\n\n  handleSubmit = () => {\n    const { title }: any = this.state;\n    this.props.handleSendRequest(title);\n    this.setState({ title: '' });\n  };\n\n  handleInputTitle = (event: any) => {\n    event.preventDefault();\n    const title = event.target.value;\n    this.setState({ title });\n  };\n\n  render() {\n    const { title }: any = this.state;\n    return (\n      <div className=\"search\">\n        <TextField\n          id=\"standard-basic\"\n          className=\"search-box\"\n          label=\"Search for a movie\"\n          onChange={this.handleInputTitle}\n          value={title}\n        />\n        <Button variant=\"contained\" color=\"default\" onClick={this.handleSubmit}>\n          Search\n        </Button>\n      </div>\n    );\n  }\n}\n\nexport default Search;\n","import React from 'react';\nimport './App.css';\nimport HttpClient from './utils/HttpClient';\nimport { API_KEY } from './config';\nimport Container from '@material-ui/core/Container';\nimport Movie from './movie/movie';\nimport Search from './search/search';\n\ninterface Props { }\ninterface State {\n  movies: [];\n}\n\nclass App extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props as any);\n\n    this.state = {\n      movies: [],\n    };\n  }\n\n  getMovie = async (title: string) => {\n    const request = HttpClient.get(`/en/API/Search/${API_KEY}/${title}`)\n      .then((response) => {\n        if (response) {\n          console.log('Response', response);\n          const movies: any = response.results;\n          this.setState({ movies });\n        }\n        return response;\n      })\n      .catch((error) => {\n        console.log('error', error);\n      });\n    return request;\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Container maxWidth=\"lg\" style={{ margin: '0 auto' }}>\n          <Search handleSendRequest={this.getMovie} />\n\n          {this.state.movies.map(({ id, ...movie }: any) => {\n            return <Movie key={id} {...movie} />;\n          })}\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export const API_KEY: string = 'k_08gybO97';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}