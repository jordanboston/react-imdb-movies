{"version":3,"sources":["search/search.module.scss","utils/HttpClient.js","movies/movies.tsx","search/search.tsx","App.tsx","config.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","baseURL","url","a","params","method","config","redirect","headers","JSON","stringify","fetch","then","response","json","get","path","sendRequest","Movies","props","Fragment","movies","map","id","title","image","description","Col","xs","sm","md","key","Card","className","Img","src","variant","alt","ImgOverlay","Text","Button","Search","handleSubmit","expression","state","handleSendRequest","setState","handleInputExpression","event","preventDefault","target","value","this","styles","search","InputGroup","FormControl","placeholder","aria-label","aria-describedby","onChange","Append","onClick","React","Component","App","getMovie","request","HttpClient","results","catch","error","console","log","Container","fluid","Row","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.413af6ac.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"search\":\"search_search__HqQjm\"};","const corsAnywhere = 'https://cors-anywhere.herokuapp.com'\nconst baseURL = `${corsAnywhere}/https://imdb-api.com`\n\nfunction get(path, params) {\n  const url = baseURL + path\n  return sendRequest(url, params);\n}\n\nasync function sendRequest(url, params = null, method = 'GET') {\n  const config = {\n    method: method,\n    redirect: 'follow',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n    }\n  };\n\n  if (method !== 'GET') {\n    config['body'] = JSON.stringify(params)\n  }\n  return fetch(url, config).then((response) => response.json());\n}\n\nexport default {\n  get\n}","import React from 'react';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\n// import styles from './movies.module.scss';\n\ninterface Movie {\n  id: number;\n  title: string;\n  image: string;\n  description: string;\n}\n\nconst Movies = (props: any) => {\n\n  return (\n    <React.Fragment>\n      {props.movies.map(({ id, title, image, description }: Movie) => (\n        <Col xs={12} sm={6} md={3} key={id}>\n          <Card className=\"bg-dark text-white\">\n            <Card.Img src={image} variant=\"top\" className=\"mb=5\" alt=\"`{Title} movie poster`\" />\n            <Card.ImgOverlay>\n              <Card.Text>\n                <Button variant=\"light\">\n                  {title} {description}\n                </Button>\n              </Card.Text>\n            </Card.ImgOverlay>\n          </Card>\n        </Col>\n      ))}\n    </React.Fragment>\n  );\n};\n\nexport default Movies;\n","import React from 'react';\nimport styles from './search.module.scss';\nimport FormControl from 'react-bootstrap/FormControl';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Button from 'react-bootstrap/Button';\n\nclass Search extends React.Component<any> {\n  constructor(props: any) {\n    super(props as any);\n    this.state = {\n      title: '',\n    };\n  }\n\n  handleSubmit = () => {\n    const { expression }: any = this.state;\n    if (expression) {\n      this.props.handleSendRequest(expression);\n      this.setState({ expression: '' });\n    }\n    return;\n  };\n\n  handleInputExpression = (event: any) => {\n    event.preventDefault();\n    const expression = event.target.value;\n    this.setState({ expression });\n  };\n\n  render() {\n    const { expression }: any = this.state;\n    return (\n      <div className={styles.search}>\n        <InputGroup className=\"mb-3\">\n          <FormControl\n            placeholder=\"Search for a movie\"\n            aria-label=\"Search for a movie\"\n            aria-describedby=\"basic-addon2\"\n            onChange={this.handleInputExpression}\n            value={expression}\n          />\n          <InputGroup.Append>\n            <Button variant=\"outline-secondary\" onClick={this.handleSubmit}>\n              Search\n            </Button>\n          </InputGroup.Append>\n        </InputGroup>\n      </div>\n    );\n  }\n}\n\nexport default Search;\n","import React from 'react';\nimport './App.scss';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport HttpClient from './utils/HttpClient';\nimport { API_KEY } from './config';\nimport Movies from './movies/movies';\nimport Search from './search/search';\n\ninterface Props { }\ninterface State {\n  movies: [];\n}\nclass App extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props as any);\n\n    this.state = {\n      movies: [],\n    };\n  }\n\n  getMovie = async (expression: string) => {\n    const request = HttpClient.get(`/en/API/Search/${API_KEY}/${expression}`)\n      .then((response) => {\n        if (response) {\n          const movies: any = response.results;\n          this.setState({ movies });\n        }\n        return response;\n      })\n      .catch((error) => {\n        console.log('error', error);\n      });\n    return request;\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Container fluid>\n          <Row>\n            <Search handleSendRequest={this.getMovie} />\n          </Row>\n          <Row>\n            <Movies movies={this.state.movies} />\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export const API_KEY: string = 'k_08gybO97';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}