{"version":3,"sources":["components/search/search.module.scss","components/header/header.tsx","utils/HttpClient.js","components/movies/movies.tsx","components/search/search.tsx","pages/home/home.tsx","config.tsx","pages/movie-details/movie-details.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Header","Navbar","bg","variant","Brand","className","to","baseURL","url","a","params","method","config","redirect","headers","JSON","stringify","fetch","then","response","json","get","path","sendRequest","movieIcon","icon","faFilm","color","Movies","props","Fragment","movies","map","id","title","image","Col","xs","sm","md","key","Card","Img","src","alt","ImgOverlay","Text","Button","Search","handleSubmit","expression","state","handleSendRequest","setState","handleInputExpression","event","preventDefault","target","value","input","onEnterKeyDown","this","styles","search","InputGroup","searchBar","FormControl","loading","disabled","placeholder","aria-label","aria-describedby","onChange","onKeyDown","Append","onClick","React","Component","Home","getMovie","isLoading","HttpClient","results","showAlert","catch","error","console","log","alert","effect","effectOut","Alert","Container","fluid","Row","MovieDetails","getDetails","movieDetails","match","plot","year","contentRating","imDbRating","metacriticRating","directors","stars","languages","genres","tagline","style","width","Body","Title","ListGroup","ListGroupItem","App","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.3fc752ae.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"search\":\"search_search__D7Pl3\",\"searchBar\":\"search_searchBar__2I0dJ\",\"disabled\":\"search_disabled__2bdpi\"};","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport { Link } from 'react-router-dom';\nimport './header.scss';\n\nconst Header = () => {\n  return (\n    <Navbar bg=\"dark mb-3\" variant=\"dark\">\n      <Navbar.Brand className=\"brand-font\">\n        <Link to=\"/react-imdb-movies/\">\n          <h1>IMDB Movie Info</h1>\n        </Link>\n      </Navbar.Brand>\n    </Navbar>\n  );\n};\n\nexport default Header;\n","const corsAnywhere = 'https://cors-anywhere.herokuapp.com'\nconst baseURL = `${corsAnywhere}/https://imdb-api.com`\n\nfunction get(path, params) {\n  const url = baseURL + path\n  return sendRequest(url, params);\n}\n\nasync function sendRequest(url, params = null, method = 'GET') {\n  const config = {\n    method: method,\n    redirect: 'follow',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n    }\n  };\n\n  if (method !== 'GET') {\n    config['body'] = JSON.stringify(params)\n  }\n  return fetch(url, config).then((response) => response.json());\n}\n\nexport default {\n  get\n}","import React from 'react';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport { Link } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFilm } from '@fortawesome/free-solid-svg-icons';\n// import styles from './movies.module.scss';\n\ninterface Movie {\n  id: string;\n  title: string;\n  image: string;\n  description: string;\n}\ninterface Props {\n  movies: [];\n}\n\nconst movieIcon = <FontAwesomeIcon icon={faFilm} color=\"white\" />;\n\nconst Movies = (props: Props) => {\n  return (\n    <React.Fragment>\n      {props.movies.map(({ id, title, image }: Movie) => (\n        <Col xs={12} sm={6} md={3} key={id}>\n          <Card className=\"bg-dark text-white\">\n            <Card.Img src={image} variant=\"top\" className=\"mb=5\" alt={`${title} movie poster`} />\n            <Card.ImgOverlay>\n              <Card.Text>\n                <Button variant=\"dark\">\n                  <Link to={`/movie/${id}`}>{ movieIcon }</Link>\n                </Button>\n              </Card.Text>\n            </Card.ImgOverlay>\n          </Card>\n        </Col>\n      ))}\n    </React.Fragment>\n  );\n};\n\nexport default Movies;\n","import React from 'react';\nimport styles from './search.module.scss';\nimport FormControl from 'react-bootstrap/FormControl';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Button from 'react-bootstrap/Button';\n\ninterface Props {\n  handleSendRequest: Function;\n  loading: boolean;\n }\ninterface State {\n  expression: string;\n}\n\nclass Search extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props as any);\n    this.state = {\n      expression: '',\n    };\n  }\n\n  handleSubmit = () => {\n    const { expression }: any = this.state;\n    if (expression) {\n      this.props.handleSendRequest(expression);\n      this.setState({ expression: '' });\n    }\n    return;\n  };\n\n  handleInputExpression = (event: any) => {\n    event.preventDefault();\n    const expression = event.target.value;\n    this.setState({ expression });\n  };\n\n  input: HTMLDivElement | null = null;\n\n  onEnterKeyDown = (event: React.KeyboardEvent<HTMLDivElement>): void => {\n    // 'keypress' event misbehaves on mobile so we track 'Enter' key via 'keydown' event\n    if (event.key === 'Enter') {\n      this.handleSubmit();\n    }\n  };\n\n  render() {\n    const { expression }: any = this.state;\n    return (\n      <div className={styles.search}>\n        <InputGroup className={styles.searchBar}>\n          <FormControl\n            className={this.props.loading ? styles.disabled : ''}\n            placeholder={this.props.loading ? 'Searching…' : 'Search for a movie'}\n            aria-label=\"Search for a movie\"\n            aria-describedby=\"basic-addon2\"\n            onChange={this.handleInputExpression}\n            onKeyDown={this.onEnterKeyDown}\n            value={expression}\n          />\n          <InputGroup.Append>\n            <Button variant=\"secondary\" onClick={this.handleSubmit}>\n              Search\n            </Button>\n          </InputGroup.Append>\n        </InputGroup>\n      </div>\n    );\n  }\n}\n\nexport default Search;\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport HttpClient from '../../utils/HttpClient';\nimport Alert from 'react-bootstrap/Alert';\nimport { API_KEY } from '../../config';\nimport Movies from '../../components/movies/movies';\nimport Search from '../../components/search/search';\nimport Reveal from 'react-reveal/Reveal';\n\ninterface Props {}\ninterface State {\n  movies: [];\n  isLoading: boolean;\n  showAlert: boolean;\n}\nclass Home extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props as any);\n\n    this.state = {\n      movies: [],\n      isLoading: false,\n      showAlert: false,\n    };\n  }\n\n  getMovie = (expression: string) => {\n    let isLoading: boolean = true;\n    this.setState({ isLoading });\n\n    const request = HttpClient.get(`/en/API/Search/${API_KEY}/${expression}`)\n      .then((response) => {\n        if (response) {\n          isLoading = false;\n          this.setState({ isLoading });\n\n          const movies: [] = response.results;\n          const showAlert = movies ? true : false\n          this.setState({ showAlert });\n          this.setState({ movies });\n        }\n        return response;\n      })\n      .catch((error) => {\n        console.log('error', error);\n      });\n    return request;\n  };\n\n  render () {\n    let movies: any = null;\n    let alert: any = null;\n\n    if (this.state.showAlert) {\n      alert = (\n        <Reveal effect=\"fadeInUp\" effectOut=\"fadeOutLeft\">\n          <div className=\"mx-auto\">\n            <Alert variant=\"warning\">Did not find anything in that search.</Alert>\n          </div>\n        </Reveal>\n      );\n    }\n\n    if (this.state.movies) {\n      movies = (\n        <Movies movies={this.state.movies} />\n      );\n    }\n\n    return (\n      <Container fluid>\n        <Row>\n          <Search handleSendRequest={this.getMovie} loading={this.state.isLoading} />\n        </Row>\n        <Row>\n          {movies}\n          {alert}\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Home;\n","export const API_KEY: string = 'k_08gybO97';","import React from 'react';\nimport HttpClient from '../../utils/HttpClient';\nimport { API_KEY } from '../../config';\nimport { movieDetailsInterface } from '../../interfaces/movieDetailsInterface';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport ListGroupItem from 'react-bootstrap/ListGroupItem';\n\ninterface Props {\n  id: string;\n  match: any;\n}\ninterface State {\n  movieDetails: movieDetailsInterface;\n}\n\nclass MovieDetails extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props as any);\n    this.state = {\n      movieDetails: {\n        title: '',\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.getDetails(this.props.match.params.id);\n  }\n\n  getDetails = (id: string) => {\n    const request = HttpClient.get(\n      `/en/API/Title/${API_KEY}/${id}/FullActor,Trailer,Ratings,`\n    )\n      .then((response) => {\n        if (response) {\n          const movieDetails = response;\n          this.setState({ movieDetails });\n          // console.table(this.state.movieDetails, ['value']);\n        }\n        return response;\n      })\n      .catch((error) => {\n        console.log('error', error);\n      });\n    return request;\n  };\n\n  render() {\n    const {\n      image, title, plot, year, contentRating, imDbRating, metacriticRating, directors,\n      stars, languages, genres, tagline\n    } = this.state.movieDetails;\n    return (\n      <Card style={{ width: '25rem' }} className=\"mx-auto mt-3\">\n        <Card.Img variant=\"top\" src={image} />\n        <Card.Body>\n          <Card.Title>{title}</Card.Title>\n          <Card.Text>{plot}</Card.Text>\n        </Card.Body>\n        <ListGroup className=\"list-group-flush\">\n          <ListGroupItem>Year: {year}</ListGroupItem>\n          <ListGroupItem>Rated: {contentRating}</ListGroupItem>\n          <ListGroupItem>IMDB Rating: {imDbRating} </ListGroupItem>\n          <ListGroupItem>\n            Meta Critic Rating: {metacriticRating}\n          </ListGroupItem>\n          <ListGroupItem>Directors: {directors}</ListGroupItem>\n          <ListGroupItem>Stars: {stars}</ListGroupItem>\n          <ListGroupItem>Languages: {languages}</ListGroupItem>\n          <ListGroupItem>Genres: {genres}</ListGroupItem>\n          <ListGroupItem>{tagline}</ListGroupItem>\n        </ListGroup>\n      </Card>\n    );\n  }\n}\n\nexport default MovieDetails;","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport './App.scss';\nimport Header from './components/header/header';\nimport Home from './pages/home/home';\nimport MovieDetails from './pages/movie-details/movie-details';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n\n        <Switch>\n          <Route exact path=\"/react-imdb-movies/\" component={Home} />\n          <Route path=\"/movie/:id\" component={MovieDetails} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}